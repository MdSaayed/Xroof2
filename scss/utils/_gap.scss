@use './breakpoints' as *;
@use 'sass:math';

@for $i from 0 through 20 {
  $gutter: $i * 0.25rem; // Bootstrap standard gutter scale

  // ------------------------
  // Base Shorthand (g-*)
  // ------------------------
  .row.g-#{$i} {
    margin-left: math.div(-$gutter, 2);
    margin-right: math.div(-$gutter, 2);
    margin-top: math.div(-$gutter, 2);
    margin-bottom: math.div(-$gutter, 2);
  }

// apply gutter only to col, but not if itâ€™s a nested row
.row.g-#{$i} > [class*="col"]:not(.row) {
  padding-left: math.div($gutter, 2);
  padding-right: math.div($gutter, 2);
  padding-top: math.div($gutter, 2);
  padding-bottom: math.div($gutter, 2);
  margin-top: 0;
}

// nested row: reset margin/padding, let it manage its own gutter
.row.g-#{$i} > .row {
  margin-left: math.div(-$gutter, 2);
  margin-right: math.div(-$gutter, 2);
  margin-top: math.div(-$gutter, 2);
  margin-bottom: math.div(-$gutter, 2);
  margin: 0;
}
F
  // ------------------------
  // Horizontal only (gx-*)
  // ------------------------
  .row.gx-#{$i} {
    margin-left: math.div(-$gutter, 2);
    margin-right: math.div(-$gutter, 2);
  }

  .row.gx-#{$i} > [class*="col"] {
    padding-left: math.div($gutter, 2);
    padding-right: math.div($gutter, 2);
  }

  // ------------------------
  // Vertical only (gy-*)
  // ------------------------
  .row.gy-#{$i} {
    margin-top: math.div(-$gutter, 2);
    margin-bottom: math.div(-$gutter, 2);
  }

  .row.gy-#{$i} > [class*="col"] {
    padding-top: math.div($gutter, 2);
    padding-bottom: math.div($gutter, 2);
  }

  // ------------------------
  // Gap utilities (Flex/Grid gap)
  // ------------------------
  .gap-#{$i} {
    gap: $gutter !important;
  }

  .gap-x-#{$i} {
    column-gap: $gutter !important;
  }

  .gap-y-#{$i} {
    row-gap: $gutter !important;
  }

  // ------------------------
  // Responsive Breakpoints
  // ------------------------
  @each $name, $breakpoint in $grid-breakpoints {
    @media (min-width: $breakpoint) {
      .row.g-#{$name}-#{$i} {
        margin-left: math.div(-$gutter, 2);
        margin-right: math.div(-$gutter, 2);
        margin-top: math.div(-$gutter, 2);
        margin-bottom: math.div(-$gutter, 2);
      }

      .row.g-#{$name}-#{$i} > [class*="col"] {
        padding-left: math.div($gutter, 2);
        padding-right: math.div($gutter, 2);
        padding-top: math.div($gutter, 2);
        padding-bottom: math.div($gutter, 2);
      }

      .row.g-#{$name}-#{$i} > .row {
        margin-left: math.div(-$gutter, 2);
        margin-right: math.div(-$gutter, 2);
        margin-top: math.div(-$gutter, 2);
        margin-bottom: math.div(-$gutter, 2);
        padding: 0;
      }

      .row.gx-#{$name}-#{$i} {
        margin-left: math.div(-$gutter, 2);
        margin-right: math.div(-$gutter, 2);
      }

      .row.gx-#{$name}-#{$i} > [class*="col"] {
        padding-left: math.div($gutter, 2);
        padding-right: math.div($gutter, 2);
      }

      .row.gy-#{$name}-#{$i} {
        margin-top: math.div(-$gutter, 2);
        margin-bottom: math.div(-$gutter, 2);
      }

      .row.gy-#{$name}-#{$i} > [class*="col"] {
        padding-top: math.div($gutter, 2);
        padding-bottom: math.div($gutter, 2);
      }

      .gap-#{$name}-#{$i} {
        gap: $gutter !important;
      }

      .gap-x-#{$name}-#{$i} {
        column-gap: $gutter !important;
      }

      .gap-y-#{$name}-#{$i} {
        row-gap: $gutter !important;
      }
    }
  }
}
